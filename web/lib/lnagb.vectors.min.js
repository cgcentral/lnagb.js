class t{constructor(t){this.elements=t,this.size={rows:t.length,columns:1},this.numberOfEntries=t.length}clone(){return new this.constructor(this.elements.slice())}equals(t){let e=this.numberOfEntries;if(e!==t.numberOfEntries)return!1;let s=this.elements,r=t.elements;for(let t=0;t<e;t++)if(s[t]!==r[t])return!1;return!0}multiplyScalar(t){let e=this.elements;for(let s=0,r=this.numberOfEntries;s<r;s++)e[s]*=t;return this}negate(){return this.multiplyScalar(-1)}add(t){let e=this.numberOfEntries;if(e!==t.numberOfEntries)return console.error("Incompatible vectors for addition"),this;let s=this.elements,r=t.elements;for(let t=0;t<e;t++)s[t]+=r[t];return this}subtract(t){let e=this.numberOfEntries;if(e!==t.numberOfEntries)return console.error("Incompatible vectors for substraction"),this;let s=this.elements,r=t.elements;for(let t=0;t<e;t++)s[t]-=r[t];return this}dot(t){if(this.numberOfEntries!==t.numberOfEntries)return void console.error("Incompatible vectors for dot product");let e=this.elements,s=t.elements;return e.reduce(((t,e,r)=>t+e*s[r]),0)}}class e{constructor(t=0,e=0){this.x=t,this.y=e,this.elements=[t,e],this.size={rows:2,columns:1},this.numberOfEntries=2}clone(){return new this.constructor(this.x,this.y)}equals(t){let e=this.elements,s=t.elements;return this.numberOfEntries===t.numberOfEntries&&e[0]===s[0]&&e[1]===s[1]}multiplyScalar(t){let e=this.elements;return e[0]*=t,this.x=e[0],e[1]*=t,this.y=e[1],this}negate(){return this.multiplyScalar(-1)}add(t){let e=this.elements,s=t.elements;return e[0]+=s[0],this.x=e[0],e[1]+=s[1],this.y=e[1],this}subtract(t){let e=this.elements,s=t.elements;return e[0]-=s[0],this.x=e[0],e[1]-=s[1],this.y=e[1],this}dot(t){let e=this.elements,s=t.elements;return e[0]*s[0]+e[1]*s[1]}}class s{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.z=s,this.elements=[t,e,s],this.size={rows:3,columns:1},this.numberOfEntries=3}clone(){return new this.constructor(this.x,this.y,this.z)}equals(t){let e=this.elements,s=t.elements;return this.numberOfEntries===t.numberOfEntries&&e[0]===s[0]&&e[1]===s[1]&&e[2]===s[2]}multiplyScalar(t){let e=this.elements;return e[0]*=t,this.x=e[0],e[1]*=t,this.y=e[1],e[2]*=t,this.z=e[2],this}negate(){return this.multiplyScalar(-1)}add(t){let e=this.elements,s=t.elements;return e[0]+=s[0],this.x=e[0],e[1]+=s[1],this.y=e[1],e[2]+=s[2],this.z=e[2],this}subtract(t){let e=this.elements,s=t.elements;return e[0]-=s[0],this.x=e[0],e[1]-=s[1],this.y=e[1],e[2]-=s[2],this.z=e[2],this}dot(t){let e=this.elements,s=t.elements;return e[0]*s[0]+e[1]*s[1]+e[2]*s[2]}cross(t){let e=this.elements,s=t.elements;return new this.constructor(e[1]*s[2]-e[2]*s[1],e[2]*s[0]-e[0]*s[2],e[0]*s[1]-e[1]*s[0])}}class r{constructor(t=0,e=0,s=0,r=0){this.x=t,this.y=e,this.z=s,this.w=r,this.elements=[t,e,s,r],this.size={rows:4,columns:1},this.numberOfEntries=4}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}equals(t){let e=this.elements,s=t.elements;return this.numberOfEntries===t.numberOfEntries&&e[0]===s[0]&&e[1]===s[1]&&e[2]===s[2]&&e[3]===s[3]}multiplyScalar(t){let e=this.elements;return e[0]*=t,this.x=e[0],e[1]*=t,this.y=e[1],e[2]*=t,this.z=e[2],e[3]*=t,this.w=e[3],this}negate(){return this.multiplyScalar(-1)}add(t){let e=this.elements,s=t.elements;return e[0]+=s[0],this.x=e[0],e[1]+=s[1],this.y=e[1],e[2]+=s[2],this.z=e[2],e[3]+=s[3],this.w=e[3],this}subtract(t){let e=this.elements,s=t.elements;return e[0]-=s[0],this.x=e[0],e[1]-=s[1],this.y=e[1],e[2]-=s[2],this.z=e[2],e[3]-=s[3],this.w=e[3],this}dot(t){let e=this.elements,s=t.elements;return e[0]*s[0]+e[1]*s[1]+e[2]*s[2]+e[3]*s[3]}}export{t as Vector,e as Vector2,s as Vector3,r as Vector4};
